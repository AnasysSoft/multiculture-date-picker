{"ast":null,"code":"import { KeyCode } from \"../enums/key-code.enum\";\nimport { KeyName } from \"../enums/key-name.enum\";\nimport { EMPTY_STR, FR, MO, ND, PIPE, RD, SA, ST, SU, TH, TU, WE, ZERO_STR } from \"../constants/constants\";\nimport { CalendarType } from \"../enums/calendar-type.enum\";\nimport { GregorianCalendar } from \"./calendars/calendar-service.gregorian\";\nimport { JalaliCalendar } from \"./calendars/calendar-service.jalali\";\nimport * as i0 from \"@angular/core\";\nexport let UtilService = /*#__PURE__*/(() => {\n  class UtilService {\n    constructor() {\n      this.weekDays = [SU, MO, TU, WE, TH, FR, SA];\n      this.calendars = new Map([[CalendarType.Gregorian, new GregorianCalendar()], [CalendarType.Jalali, new JalaliCalendar()]]);\n    }\n    isDateValid(calendar, dateStr, options, validateOpts) {\n      return this.calendars[calendar].isDateValid(dateStr, options, validateOpts);\n    }\n    isDateValidDateRange(calendar, dateRangeStr, options, validateOpts) {\n      return this.calendars[calendar].isDateValidDateRange(dateRangeStr, options, validateOpts);\n    }\n    getDateValue(calendar, dateStr, dateFormat, delimeters) {\n      return this.calendars[calendar].getDateValue(dateStr, dateFormat, delimeters);\n    }\n    getMonthNumberByMonthName(calendar, df, monthLabels) {\n      return this.calendars[calendar].getMonthNumberByMonthName(df, monthLabels);\n    }\n    getNumberByValue(calendar, df) {\n      return this.calendars[calendar].getNumberByValue(df);\n    }\n    parseDefaultMonth(calendar, monthString) {\n      return this.calendars[calendar].parseDefaultMonth(monthString);\n    }\n    isDisabledDate(calendar, date, options) {\n      return this.calendars[calendar].isDisabledDate(date, options);\n    }\n    getDisabledValue(calendar, disabled, styleClass) {\n      return this.calendars[calendar].getDisabledValue(disabled, styleClass);\n    }\n    dateMatchToDates(calendar, date, dates) {\n      return this.calendars[calendar].dateMatchToDates(date, dates);\n    }\n    isDisabledMonth(calendar, year, month, options) {\n      return this.calendars[calendar].isDisabledMonth(year, month, options);\n    }\n    isDisabledYear(calendar, year, options) {\n      return this.calendars[calendar].isDisabledYear(year, options);\n    }\n    isDisabledByDisableUntil(calendar, date, disableUntil) {\n      return this.calendars[calendar].isDisabledByDisableUntil(date, disableUntil);\n    }\n    isDisabledByDisableSince(calendar, date, disableSince) {\n      return this.calendars[calendar].isDisabledByDisableSince(date, disableSince);\n    }\n    isPastDatesEnabled(calendar, date, enableDates) {\n      return this.calendars[calendar].isPastDatesEnabled(date, enableDates);\n    }\n    isFutureDatesEnabled(calendar, date, enableDates) {\n      return this.calendars[calendar].isFutureDatesEnabled(date, enableDates);\n    }\n    isDatesEnabled(calendar, dateBegin, dateEnd, enableDates) {\n      return this.calendars[calendar].isDatesEnabled(dateBegin, dateEnd, enableDates);\n    }\n    isDisabledByDisableDateRange(calendar, dateBegin, dateEnd, disableDateRanges) {\n      return this.calendars[calendar].isDisabledByDisableDateRange(dateBegin, dateEnd, disableDateRanges);\n    }\n    isMarkedDate(calendar, date, options) {\n      return this.calendars[calendar].isMarkedDate(date, options);\n    }\n    getMarkedValue(calendar, marked, color, styleClass) {\n      return this.calendars[calendar].getMarkedValue(marked, color, styleClass);\n    }\n    isHighlightedDate(calendar, date, options) {\n      return this.calendars[calendar].isHighlightedDate(date, options);\n    }\n    getWeekNumber(calendar, date) {\n      return this.calendars[calendar].getWeekNumber(date);\n    }\n    getDateModel(calendar, date, dateRange, dateFormat, monthLabels, rangeDelimiter, dateStr = EMPTY_STR) {\n      return this.calendars[calendar].getDateModel(date, dateRange, dateFormat, monthLabels, rangeDelimiter, dateStr);\n    }\n    formatDate(calendar, date, dateFormat, monthLabels) {\n      return this.calendars[calendar].formatDate(date, dateFormat, monthLabels);\n    }\n    getOrdinal(calendar, date) {\n      if (date > 3 && date < 21) {\n        return TH;\n      }\n      switch (date % 10) {\n        case 1:\n          return ST;\n        case 2:\n          return ND;\n        case 3:\n          return RD;\n        default:\n          return TH;\n      }\n    }\n    getFormattedDate(calendar, model) {\n      return !model.isRange ? model.singleDate.formatted : model.dateRange.formatted;\n    }\n    preZero(calendar, val) {\n      return val < 10 ? ZERO_STR + val : String(val);\n    }\n    isInitializedDate(calendar, date) {\n      return date.year !== 0 && date.month !== 0 && date.day !== 0;\n    }\n    isDateEarlier(calendar, firstDate, secondDate) {\n      return this.getTimeInMilliseconds(firstDate) < this.getTimeInMilliseconds(secondDate);\n    }\n    isDateSameOrEarlier(calendar, firstDate, secondDate) {\n      return this.getTimeInMilliseconds(firstDate) <= this.getTimeInMilliseconds(secondDate);\n    }\n    isDateSame(calendar, firstDate, secondDate) {\n      return this.getTimeInMilliseconds(firstDate) === this.getTimeInMilliseconds(secondDate);\n    }\n    isDateRangeBeginOrEndSame(calendar, dateRange, date) {\n      const dateMs = this.getTimeInMilliseconds(date);\n      return this.getTimeInMilliseconds(dateRange.begin) === dateMs || this.getTimeInMilliseconds(dateRange.end) === dateMs;\n    }\n    isDateRangeBegin(calendar, dateRange, date) {\n      const dateMs = this.getTimeInMilliseconds(date);\n      return this.getTimeInMilliseconds(dateRange.begin) === dateMs;\n    }\n    isDateRangeEnd(calendar, dateRange, date) {\n      const dateMs = this.getTimeInMilliseconds(date);\n      return this.getTimeInMilliseconds(dateRange.end) === dateMs;\n    }\n    isDateInRange(calendar, date, dateRange) {\n      if (!this.isInitializedDate(dateRange.begin) || !this.isInitializedDate(dateRange.end)) {\n        return false;\n      }\n      return this.isDateSameOrEarlier(dateRange.begin, date) && this.isDateSameOrEarlier(date, dateRange.end);\n    }\n    resetDate(calendar) {\n      return {\n        year: 0,\n        month: 0,\n        day: 0\n      };\n    }\n    getTimeInMilliseconds(calendar, date) {\n      return this.myDateToJsDate(date).getTime();\n    }\n    getToday(calendar) {\n      const date = new Date();\n      return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate()\n      };\n    }\n    getDayNumber(calendar, date) {\n      return new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0).getDay();\n    }\n    getWeekdayIndex(calendar, wd) {\n      return this.weekDays.indexOf(wd);\n    }\n    getEpocTime(calendar, date) {\n      return Math.round(this.getTimeInMilliseconds(date) / 1000.0);\n    }\n    jsDateToMyDate(calendar, date) {\n      return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate()\n      };\n    }\n    myDateToJsDate(calendar, date) {\n      const {\n        year,\n        month,\n        day\n      } = date;\n      return new Date(year, month - 1, day, 0, 0, 0, 0);\n    }\n    datesInMonth(calendar, m, y) {\n      return new Date(y, m, 0).getDate();\n    }\n    datesInPrevMonth(calendar, m, y) {\n      const d = this.getJsDate(y, m, 1);\n      d.setMonth(d.getMonth() - 1);\n      return this.datesInMonth(d.getMonth() + 1, d.getFullYear());\n    }\n    getJsDate(calendar, year, month, day) {\n      return new Date(year, month - 1, day, 0, 0, 0, 0);\n    }\n    getSelectedValue(calendar, selectedValue, dateRange) {\n      if (!selectedValue) {\n        return null;\n      }\n      if (!dateRange) {\n        return selectedValue.date;\n      } else {\n        const {\n          beginDate,\n          endDate\n        } = selectedValue;\n        return {\n          begin: beginDate,\n          end: endDate\n        };\n      }\n    }\n    getKeyCodeFromEvent(calendar, event) {\n      let key = event.key || event.keyCode || event.which;\n      if (this.checkKeyName(key, KeyName.enter) || key === KeyCode.enter) {\n        return KeyCode.enter;\n      } else if (this.checkKeyName(key, KeyName.esc) || key === KeyCode.esc) {\n        return KeyCode.esc;\n      } else if (this.checkKeyName(key, KeyName.space) || key === KeyCode.space) {\n        return KeyCode.space;\n      } else if (this.checkKeyName(key, KeyName.leftArrow) || key === KeyCode.leftArrow) {\n        return KeyCode.leftArrow;\n      } else if (this.checkKeyName(key, KeyName.upArrow) || key === KeyCode.upArrow) {\n        return KeyCode.upArrow;\n      } else if (this.checkKeyName(key, KeyName.rightArrow) || key === KeyCode.rightArrow) {\n        return KeyCode.rightArrow;\n      } else if (this.checkKeyName(key, KeyName.downArrow) || key === KeyCode.downArrow) {\n        return KeyCode.downArrow;\n      } else if (this.checkKeyName(key, KeyName.tab) || key === KeyCode.tab) {\n        return KeyCode.tab;\n      } else if (this.checkKeyName(key, KeyName.shift) || key === KeyCode.shift) {\n        return KeyCode.shift;\n      } else {\n        return null;\n      }\n    }\n    checkKeyName(calendar, key, keyName) {\n      const arr = keyName.split(PIPE);\n      return arr.indexOf(key) !== -1;\n    }\n    static #_ = this.ɵfac = function UtilService_Factory(t) {\n      return new (t || UtilService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UtilService,\n      factory: UtilService.ɵfac\n    });\n  }\n  return UtilService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}