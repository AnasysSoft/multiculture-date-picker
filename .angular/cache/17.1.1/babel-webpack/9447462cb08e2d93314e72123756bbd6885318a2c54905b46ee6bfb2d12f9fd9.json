{"ast":null,"code":"import { EMPTY_STR, FR, MO, SA, SU, TH, TU, WE } from \"../constants/constants\";\nimport { CalendarType } from \"../enums/calendar-type.enum\";\nimport { GregorianCalendar } from \"./calendars/calendar-service.gregorian\";\nimport { JalaliCalendar } from \"./calendars/calendar-service.jalali\";\nimport * as i0 from \"@angular/core\";\nexport let UtilService = /*#__PURE__*/(() => {\n  class UtilService {\n    constructor() {\n      this.weekDays = [SU, MO, TU, WE, TH, FR, SA];\n      this.calendars = new Map([[CalendarType.Gregorian, new GregorianCalendar()], [CalendarType.Jalali, new JalaliCalendar()]]);\n    }\n    getCalendar(calendarType) {\n      if (!calendarType) calendarType = CalendarType.Gregorian;\n      return this.calendars.get(calendarType);\n    }\n    isDateValid(calendar, dateStr, options, validateOpts) {\n      console.log('UtilService.isDateValid');\n      return this.getCalendar(calendar).isDateValid(dateStr, options, validateOpts);\n    }\n    isDateValidDateRange(calendar, dateRangeStr, options, validateOpts) {\n      console.log('UtilService.isDateValidDateRange');\n      return this.getCalendar(calendar).isDateValidDateRange(dateRangeStr, options, validateOpts);\n    }\n    getDateValue(calendar, dateStr, dateFormat, delimeters) {\n      console.log('UtilService.getDateValue');\n      return this.getCalendar(calendar).getDateValue(dateStr, dateFormat, delimeters);\n    }\n    getMonthNumberByMonthName(calendar, df, monthLabels) {\n      console.log('UtilService.getMonthNumberByMonthName');\n      return this.getCalendar(calendar).getMonthNumberByMonthName(df, monthLabels);\n    }\n    getNumberByValue(calendar, df) {\n      console.log('UtilService.getNumberByValue');\n      return this.getCalendar(calendar).getNumberByValue(df);\n    }\n    parseDefaultMonth(calendar, monthString) {\n      console.log('UtilService.parseDefaultMonth');\n      return this.getCalendar(calendar).parseDefaultMonth(monthString);\n    }\n    isDisabledDate(calendar, date, options) {\n      console.log('UtilService.isDisabledDate');\n      return this.getCalendar(calendar).isDisabledDate(date, options);\n    }\n    getDisabledValue(calendar, disabled, styleClass) {\n      console.log('UtilService.getDisabledValue');\n      return this.getCalendar(calendar).getDisabledValue(disabled, styleClass);\n    }\n    dateMatchToDates(calendar, date, dates) {\n      console.log('UtilService.dateMatchToDates');\n      return this.getCalendar(calendar).dateMatchToDates(date, dates);\n    }\n    isDisabledMonth(calendar, year, month, options) {\n      console.log('UtilService.isDisabledMonth');\n      return this.getCalendar(calendar).isDisabledMonth(year, month, options);\n    }\n    isDisabledYear(calendar, year, options) {\n      console.log('UtilService.isDisabledYear');\n      return this.getCalendar(calendar).isDisabledYear(year, options);\n    }\n    isDisabledByDisableUntil(calendar, date, disableUntil) {\n      console.log('UtilService.isDisabledByDisableUntil');\n      return this.getCalendar(calendar).isDisabledByDisableUntil(date, disableUntil);\n    }\n    isDisabledByDisableSince(calendar, date, disableSince) {\n      console.log('UtilService.isDisabledByDisableSince');\n      return this.getCalendar(calendar).isDisabledByDisableSince(date, disableSince);\n    }\n    isPastDatesEnabled(calendar, date, enableDates) {\n      console.log('UtilService.isPastDatesEnabled');\n      return this.getCalendar(calendar).isPastDatesEnabled(date, enableDates);\n    }\n    isFutureDatesEnabled(calendar, date, enableDates) {\n      console.log('UtilService.isFutureDatesEnabled');\n      return this.getCalendar(calendar).isFutureDatesEnabled(date, enableDates);\n    }\n    isDatesEnabled(calendar, dateBegin, dateEnd, enableDates) {\n      console.log('UtilService.isDatesEnabled');\n      return this.getCalendar(calendar).isDatesEnabled(dateBegin, dateEnd, enableDates);\n    }\n    isDisabledByDisableDateRange(calendar, dateBegin, dateEnd, disableDateRanges) {\n      console.log('UtilService.isDisabledByDisableDateRange');\n      return this.getCalendar(calendar).isDisabledByDisableDateRange(dateBegin, dateEnd, disableDateRanges);\n    }\n    isMarkedDate(calendar, date, options) {\n      console.log('UtilService.isMarkedDate');\n      return this.getCalendar(calendar).isMarkedDate(date, options);\n    }\n    getMarkedValue(calendar, marked, color, styleClass) {\n      console.log('UtilService.getMarkedValue');\n      return this.getCalendar(calendar).getMarkedValue(marked, color, styleClass);\n    }\n    isHighlightedDate(calendar, date, options) {\n      console.log('UtilService.isHighlightedDate');\n      return this.getCalendar(calendar).isHighlightedDate(date, options);\n    }\n    getWeekNumber(calendar, date) {\n      console.log('UtilService.getWeekNumber');\n      return this.getCalendar(calendar).getWeekNumber(date);\n    }\n    getDateModel(calendar, date, dateRange, dateFormat, monthLabels, rangeDelimiter, dateStr = EMPTY_STR) {\n      console.log('UtilService.getDateModel');\n      return this.getCalendar(calendar).getDateModel(date, dateRange, dateFormat, monthLabels, rangeDelimiter, dateStr);\n    }\n    formatDate(calendar, date, dateFormat, monthLabels) {\n      console.log('UtilService.formatDate');\n      return this.getCalendar(calendar).formatDate(date, dateFormat, monthLabels);\n    }\n    getOrdinal(calendar, date) {\n      console.log('UtilService.getOrdinal');\n      return this.getCalendar(calendar).getOrdinal(date);\n    }\n    getFormattedDate(calendar, model) {\n      console.log('UtilService.getFormattedDate');\n      return this.getCalendar(calendar).getFormattedDate(model);\n    }\n    preZero(calendar, val) {\n      console.log('UtilService.preZero');\n      return this.getCalendar(calendar).preZero(val);\n    }\n    isInitializedDate(calendar, date) {\n      console.log('UtilService.isInitializedDate');\n      return this.getCalendar(calendar).isInitializedDate(date);\n    }\n    isDateEarlier(calendar, firstDate, secondDate) {\n      console.log('UtilService.isDateEarlier');\n      return this.getCalendar(calendar).isDateEarlier(firstDate, secondDate);\n    }\n    isDateSameOrEarlier(calendar, firstDate, secondDate) {\n      console.log('UtilService.isDateSameOrEarlier');\n      return this.getCalendar(calendar).isDateSameOrEarlier(firstDate, secondDate);\n    }\n    isDateSame(calendar, firstDate, secondDate) {\n      console.log('UtilService.isDateSame');\n      return this.getCalendar(calendar).isDateSame(firstDate, secondDate);\n    }\n    isDateRangeBeginOrEndSame(calendar, dateRange, date) {\n      console.log('UtilService.isDateRangeBeginOrEndSame');\n      return this.getCalendar(calendar).isDateRangeBeginOrEndSame(dateRange, date);\n    }\n    isDateRangeBegin(calendar, dateRange, date) {\n      console.log('UtilService.isDateRangeBegin');\n      return this.getCalendar(calendar).isDateRangeBegin(dateRange, date);\n    }\n    isDateRangeEnd(calendar, dateRange, date) {\n      console.log('UtilService.isDateRangeEnd');\n      return this.getCalendar(calendar).isDateRangeEnd(dateRange, date);\n    }\n    isDateInRange(calendar, date, dateRange) {\n      console.log('UtilService.isDateInRange');\n      return this.getCalendar(calendar).isDateInRange(date, dateRange);\n    }\n    resetDate(calendar) {\n      console.log('UtilService.resetDate');\n      return this.getCalendar(calendar).resetDate();\n    }\n    getTimeInMilliseconds(calendar, date) {\n      console.log('UtilService.getTimeInMilliseconds');\n      return this.getCalendar(calendar).getTimeInMilliseconds(date);\n    }\n    getToday(calendar) {\n      console.log('UtilService.getToday');\n      return this.getCalendar(calendar).getToday();\n    }\n    getDayNumber(calendar, date) {\n      console.log('UtilService.getDayNumber');\n      return this.getCalendar(calendar).getDayNumber(date);\n    }\n    getWeekdayIndex(calendar, wd) {\n      console.log('UtilService.getWeekdayIndex');\n      return this.getCalendar(calendar).getWeekdayIndex(wd);\n    }\n    getEpocTime(calendar, date) {\n      console.log('UtilService.getEpocTime');\n      return this.getCalendar(calendar).getEpocTime(date);\n    }\n    jsDateToMyDate(calendar, date) {\n      console.log('UtilService.jsDateToMyDate');\n      return this.getCalendar(calendar).jsDateToMyDate(date);\n    }\n    myDateToJsDate(calendar, date) {\n      console.log('UtilService.myDateToJsDate');\n      return this.getCalendar(calendar).myDateToJsDate(date);\n    }\n    datesInMonth(calendar, m, y) {\n      console.log('UtilService.datesInMonth');\n      return this.getCalendar(calendar).datesInMonth(m, y);\n    }\n    datesInPrevMonth(calendar, m, y) {\n      console.log('UtilService.datesInPrevMonth');\n      return this.getCalendar(calendar).datesInPrevMonth(m, y);\n    }\n    getJsDate(calendar, year, month, day) {\n      console.log('UtilService.getJsDate');\n      return this.getCalendar(calendar).getJsDate(year, month, day);\n    }\n    getSelectedValue(calendar, selectedValue, dateRange) {\n      console.log('UtilService.getSelectedValue');\n      return this.getCalendar(calendar).getSelectedValue(selectedValue, dateRange);\n    }\n    getKeyCodeFromEvent(calendar, event) {\n      console.log('UtilService.getKeyCodeFromEvent');\n      return this.getCalendar(calendar).getKeyCodeFromEvent(event);\n    }\n    checkKeyName(calendar, key, keyName) {\n      console.log('UtilService.checkKeyName');\n      return this.getCalendar(calendar).checkKeyName(key, keyName);\n    }\n    static #_ = this.ɵfac = function UtilService_Factory(t) {\n      return new (t || UtilService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UtilService,\n      factory: UtilService.ɵfac\n    });\n  }\n  return UtilService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}